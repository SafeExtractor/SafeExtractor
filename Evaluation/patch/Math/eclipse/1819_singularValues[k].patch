diff --git a/src/main/java/org/apache/commons/math3/linear/SingularValueDecomposition.java b/src/main/java/org/apache/commons/math3/linear/SingularValueDecomposition.java
index efbe8a2..99a8be0 100644
--- a/src/main/java/org/apache/commons/math3/linear/SingularValueDecomposition.java
+++ b/src/main/java/org/apache/commons/math3/linear/SingularValueDecomposition.java
@@ -281,9 +281,10 @@
             // kase = 3     if e[k-1] is negligible, k<p, and
             //              s(k), ..., s(p) are not negligible (qr step).
             // kase = 4     if e(p-1) is negligible (convergence).
-            for (k = p - 2; k >= 0; k--) {
+            double var_1819 = singularValues[k];
+			for (k = p - 2; k >= 0; k--) {
                 final double threshold
-                    = TINY + EPS * (FastMath.abs(singularValues[k]) +
+                    = TINY + EPS * (FastMath.abs(var_1819) +
                                     FastMath.abs(singularValues[k + 1]));
 
                 // the following condition is written this way in order
@@ -375,12 +376,12 @@
                                                           FastMath.abs(singularValues[p - 2]));
                     final double scale = FastMath.max(FastMath.max(FastMath.max(maxPm1Pm2,
                                                                                 FastMath.abs(e[p - 2])),
-                                                                   FastMath.abs(singularValues[k])),
+                                                                   FastMath.abs(var_1819)),
                                                       FastMath.abs(e[k]));
                     final double sp = singularValues[p - 1] / scale;
                     final double spm1 = singularValues[p - 2] / scale;
                     final double epm1 = e[p - 2] / scale;
-                    final double sk = singularValues[k] / scale;
+                    final double sk = var_1819 / scale;
                     final double ek = e[k] / scale;
                     final double b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2.0;
                     final double c = (sp * epm1) * (sp * epm1);
@@ -436,8 +437,8 @@
                 // Convergence.
                 default: {
                     // Make the singular values positive.
-                    if (singularValues[k] <= 0) {
-                        singularValues[k] = singularValues[k] < 0 ? -singularValues[k] : 0;
+                    if (var_1819 <= 0) {
+                        singularValues[k] = var_1819 < 0 ? -var_1819 : 0;
 
                         for (int i = 0; i <= pp; i++) {
                             V[i][k] = -V[i][k];
@@ -445,10 +446,10 @@
                     }
                     // Order the singular values.
                     while (k < pp) {
-                        if (singularValues[k] >= singularValues[k + 1]) {
+                        if (var_1819 >= singularValues[k + 1]) {
                             break;
                         }
-                        double t = singularValues[k];
+                        double t = var_1819;
                         singularValues[k] = singularValues[k + 1];
                         singularValues[k + 1] = t;
                         if (k < n - 1) {

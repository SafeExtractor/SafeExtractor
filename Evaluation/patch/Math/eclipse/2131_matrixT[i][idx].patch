diff --git a/src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java b/src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java
index 4652f61..5a1ac22 100644
--- a/src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java
+++ b/src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java
@@ -879,7 +879,8 @@
                         s = sa;
                     } else {
                         l = i;
-                        if (Precision.equals(imagEigenvalues[i], 0.0)) {
+                        double var_2131 = matrixT[i][idx];
+						if (Precision.equals(imagEigenvalues[i], 0.0)) {
                             final Complex c = cdiv(-ra, -sa, w, q);
                             matrixT[i][idx - 1] = c.getReal();
                             matrixT[i][idx] = c.getImaginary();
@@ -902,12 +903,12 @@
 
                             if (FastMath.abs(x) > (FastMath.abs(z) + FastMath.abs(q))) {
                                 matrixT[i + 1][idx - 1] = (-ra - w * matrixT[i][idx - 1] +
-                                                           q * matrixT[i][idx]) / x;
-                                matrixT[i + 1][idx]     = (-sa - w * matrixT[i][idx] -
+                                                           q * var_2131) / x;
+                                matrixT[i + 1][idx]     = (-sa - w * var_2131 -
                                                            q * matrixT[i][idx - 1]) / x;
                             } else {
                                 final Complex c2        = cdiv(-r - y * matrixT[i][idx - 1],
-                                                               -s - y * matrixT[i][idx], z, q);
+                                                               -s - y * var_2131, z, q);
                                 matrixT[i + 1][idx - 1] = c2.getReal();
                                 matrixT[i + 1][idx]     = c2.getImaginary();
                             }
@@ -915,7 +916,7 @@
 
                         // Overflow control
                         double t = FastMath.max(FastMath.abs(matrixT[i][idx - 1]),
-                                                FastMath.abs(matrixT[i][idx]));
+                                                FastMath.abs(var_2131));
                         if ((Precision.EPSILON * t) * t > 1) {
                             for (int j = i; j <= idx; j++) {
                                 matrixT[j][idx - 1] = matrixT[j][idx - 1] / t;

diff --git a/Users/safe/paper/Evaluation/patch/Math/eclipse/3508_computeObjectiveValue(currentPoint).patch b/Users/safe/paper/Evaluation/patch/Math/ours/3508_computeObjectiveValue(currentPoint).patch
index 8e9b01b..1c54c15 100644
--- a/Users/safe/paper/Evaluation/patch/Math/eclipse/3508_computeObjectiveValue(currentPoint).patch
+++ b/Users/safe/paper/Evaluation/patch/Math/ours/3508_computeObjectiveValue(currentPoint).patch
@@ -1,23 +1,14 @@
 diff --git a/src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java
-index edf07d5..2d42b62 100644
+index edf07d5..b0aa223 100644
 --- a/src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java
 +++ b/src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java
-@@ -305,7 +305,8 @@
-         final RealMatrix weightMatrixSqrt = getWeightSquareRoot();
- 
-         // Evaluate the function at the starting point and calculate its norm.
--        double[] currentObjective = computeObjectiveValue(currentPoint);
-+        double[] var_3508 = computeObjectiveValue(currentPoint);
-+		double[] currentObjective = var_3508;
-         double[] currentResiduals = computeResiduals(currentObjective);
-         PointVectorValuePair current = new PointVectorValuePair(currentPoint, currentObjective);
-         double currentCost = computeCost(currentResiduals);
-@@ -419,7 +420,7 @@
+@@ -419,7 +419,8 @@
                  }
  
                  // Evaluate the function at x + p and calculate its norm.
 -                currentObjective = computeObjectiveValue(currentPoint);
-+                currentObjective = var_3508;
++                double[] var_3508 = computeObjectiveValue(currentPoint);
++				currentObjective = var_3508;
                  currentResiduals = computeResiduals(currentObjective);
                  current = new PointVectorValuePair(currentPoint, currentObjective);
                  currentCost = computeCost(currentResiduals);

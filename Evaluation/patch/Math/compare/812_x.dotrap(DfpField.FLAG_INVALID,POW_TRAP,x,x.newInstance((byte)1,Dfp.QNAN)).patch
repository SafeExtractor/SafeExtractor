diff --git a/Users/safe/paper/Evaluation/patch/Math/eclipse/812_x.dotrap(DfpField.FLAG_INVALID,POW_TRAP,x,x.newInstance((byte)1,Dfp.QNAN)).patch b/Users/safe/paper/Evaluation/patch/Math/ours/812_x.dotrap(DfpField.FLAG_INVALID,POW_TRAP,x,x.newInstance((byte)1,Dfp.QNAN)).patch
index 00e72c5..dd69b44 100644
--- a/Users/safe/paper/Evaluation/patch/Math/eclipse/812_x.dotrap(DfpField.FLAG_INVALID,POW_TRAP,x,x.newInstance((byte)1,Dfp.QNAN)).patch
+++ b/Users/safe/paper/Evaluation/patch/Math/ours/812_x.dotrap(DfpField.FLAG_INVALID,POW_TRAP,x,x.newInstance((byte)1,Dfp.QNAN)).patch
@@ -1,36 +1,14 @@
 diff --git a/src/main/java/org/apache/commons/math3/dfp/DfpMath.java b/src/main/java/org/apache/commons/math3/dfp/DfpMath.java
-index af670fc..79dcb39 100644
+index af670fc..7aadd5d 100644
 --- a/src/main/java/org/apache/commons/math3/dfp/DfpMath.java
 +++ b/src/main/java/org/apache/commons/math3/dfp/DfpMath.java
-@@ -532,10 +532,11 @@
-             return x;
-         }
- 
--        if (x.isNaN() || y.isNaN()) {
-+        Dfp var_812 = x.dotrap(DfpField.FLAG_INVALID, POW_TRAP, x, x.newInstance((byte)1, Dfp.QNAN));
-+		if (x.isNaN() || y.isNaN()) {
-             // Test for NaNs
-             x.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);
--            return x.dotrap(DfpField.FLAG_INVALID, POW_TRAP, x, x.newInstance((byte)1, Dfp.QNAN));
-+            return var_812;
-         }
- 
-         // X == 0
-@@ -591,7 +592,7 @@
- 
-         if (x.equals(one) && y.classify() == Dfp.INFINITE) {
-             x.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);
--            return x.dotrap(DfpField.FLAG_INVALID, POW_TRAP, x, x.newInstance((byte)1, Dfp.QNAN));
-+            return var_812;
-         }
- 
-         if (x.classify() == Dfp.INFINITE) {
-@@ -625,7 +626,7 @@
+@@ -625,7 +625,8 @@
  
          if (invert && !y.rint().equals(y)) {
              x.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);
 -            return x.dotrap(DfpField.FLAG_INVALID, POW_TRAP, x, x.newInstance((byte)1, Dfp.QNAN));
-+            return var_812;
++            Dfp var_812 = x.dotrap(DfpField.FLAG_INVALID, POW_TRAP, x, x.newInstance((byte)1, Dfp.QNAN));
++			return var_812;
          }
  
          // End special cases

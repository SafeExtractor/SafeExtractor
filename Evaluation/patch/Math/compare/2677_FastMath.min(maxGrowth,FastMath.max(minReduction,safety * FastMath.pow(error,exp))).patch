diff --git a/Users/safe/paper/Evaluation/patch/Math/eclipse/2677_FastMath.min(maxGrowth,FastMath.max(minReduction,safety * FastMath.pow(error,exp))).patch b/Users/safe/paper/Evaluation/patch/Math/ours/2677_FastMath.min(maxGrowth,FastMath.max(minReduction,safety * FastMath.pow(error,exp))).patch
index fa0fb07..c3f41cc 100644
--- a/Users/safe/paper/Evaluation/patch/Math/eclipse/2677_FastMath.min(maxGrowth,FastMath.max(minReduction,safety * FastMath.pow(error,exp))).patch	
+++ b/Users/safe/paper/Evaluation/patch/Math/ours/2677_FastMath.min(maxGrowth,FastMath.max(minReduction,safety * FastMath.pow(error,exp))).patch	
@@ -1,34 +1,17 @@
 diff --git a/src/main/java/org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
-index 2ff86a0..d5e02b7 100644
+index 2ff86a0..1e6c9a6 100644
 --- a/src/main/java/org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
 +++ b/src/main/java/org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
-@@ -226,7 +226,9 @@
- 
-       // iterate over step size, ensuring local normalized error is smaller than 1
-       double error = 10;
--      while (error >= 1.0) {
-+      double var_2677 = FastMath.min(maxGrowth,
-+	               FastMath.max(minReduction, safety * FastMath.pow(error, exp)));
-+	while (error >= 1.0) {
- 
-         if (firstTime || !fsal) {
-           // first stage
-@@ -289,8 +291,7 @@
+@@ -288,9 +288,10 @@
+         error = estimateError(yDotK, y, yTmp, stepSize);
          if (error >= 1.0) {
            // reject the step and attempt to reduce error by stepsize control
-           final double factor =
+-          final double factor =
 -              FastMath.min(maxGrowth,
--                           FastMath.max(minReduction, safety * FastMath.pow(error, exp)));
++          double var_2677 = FastMath.min(maxGrowth,
+                            FastMath.max(minReduction, safety * FastMath.pow(error, exp)));
++		final double factor =
 +              var_2677;
            hNew = filterStep(stepSize * factor, forward, false);
          }
  
-@@ -315,7 +316,7 @@
- 
-           // stepsize control for next step
-           final double factor =
--              FastMath.min(maxGrowth, FastMath.max(minReduction, safety * FastMath.pow(error, exp)));
-+              var_2677;
-           final double  scaledH    = stepSize * factor;
-           final double  nextT      = stepStart + scaledH;
-           final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);

diff --git a/Users/safe/paper/Evaluation/patch/Math/eclipse/1143_new OrientedPoint(new Vector1D(upper),true).wholeHyperplane().patch b/Users/safe/paper/Evaluation/patch/Math/ours/1143_new OrientedPoint(new Vector1D(upper),true).wholeHyperplane().patch
index b9c8560..d48212b 100644
--- a/Users/safe/paper/Evaluation/patch/Math/eclipse/1143_new OrientedPoint(new Vector1D(upper),true).wholeHyperplane().patch	
+++ b/Users/safe/paper/Evaluation/patch/Math/ours/1143_new OrientedPoint(new Vector1D(upper),true).wholeHyperplane().patch	
@@ -1,31 +1,16 @@
 diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet.java
-index 674fb0a..e9955bd 100644
+index 674fb0a..71f966b 100644
 --- a/src/main/java/org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet.java
 +++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet.java
-@@ -91,14 +91,15 @@
-      * @return the built tree
-      */
-     private static BSPTree<Euclidean1D> buildTree(final double lower, final double upper) {
--        if (Double.isInfinite(lower) && (lower < 0)) {
-+        SubOrientedPoint var_1143 = new OrientedPoint(new Vector1D(upper), true).wholeHyperplane();
-+		if (Double.isInfinite(lower) && (lower < 0)) {
-             if (Double.isInfinite(upper) && (upper > 0)) {
-                 // the tree must cover the whole real line
+@@ -97,8 +97,9 @@
                  return new BSPTree<Euclidean1D>(Boolean.TRUE);
              }
              // the tree must be open on the negative infinity side
-             final SubHyperplane<Euclidean1D> upperCut =
+-            final SubHyperplane<Euclidean1D> upperCut =
 -                new OrientedPoint(new Vector1D(upper), true).wholeHyperplane();
++            SubOrientedPoint var_1143 = new OrientedPoint(new Vector1D(upper), true).wholeHyperplane();
++			final SubHyperplane<Euclidean1D> upperCut =
 +                var_1143;
              return new BSPTree<Euclidean1D>(upperCut,
                                 new BSPTree<Euclidean1D>(Boolean.FALSE),
                                 new BSPTree<Euclidean1D>(Boolean.TRUE),
-@@ -116,7 +117,7 @@
- 
-         // the tree must be bounded on the two sides
-         final SubHyperplane<Euclidean1D> upperCut =
--            new OrientedPoint(new Vector1D(upper), true).wholeHyperplane();
-+            var_1143;
-         return new BSPTree<Euclidean1D>(lowerCut,
-                                         new BSPTree<Euclidean1D>(Boolean.FALSE),
-                                         new BSPTree<Euclidean1D>(upperCut,

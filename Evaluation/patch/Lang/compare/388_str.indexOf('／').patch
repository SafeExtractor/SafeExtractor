diff --git "a/home/safe/SafeExtractor/Evaluation/patch/Lang/eclipse/388_str.indexOf('\357\274\217').patch" "b/home/safe/SafeExtractor/Evaluation/patch/Lang/ours/388_str.indexOf('\357\274\217').patch"
index 87ef60f..e2b1fef 100644
--- "a/home/safe/SafeExtractor/Evaluation/patch/Lang/eclipse/388_str.indexOf('\357\274\217').patch"
+++ "b/home/safe/SafeExtractor/Evaluation/patch/Lang/ours/388_str.indexOf('\357\274\217').patch"
@@ -1,27 +1,14 @@
 diff --git a/src/main/java/org/apache/commons/lang3/math/Fraction.java b/src/main/java/org/apache/commons/lang3/math/Fraction.java
-index a722ffe..f3ea1da 100644
+index a722ffe..fb8eddc 100644
 --- a/src/main/java/org/apache/commons/lang3/math/Fraction.java
 +++ b/src/main/java/org/apache/commons/lang3/math/Fraction.java
-@@ -328,10 +328,11 @@
- 
-         // parse X Y/Z format
-         pos = str.indexOf(' ');
--        if (pos > 0) {
-+        int var_388 = str.indexOf('/');
-+		if (pos > 0) {
+@@ -331,7 +331,8 @@
+         if (pos > 0) {
              final int whole = Integer.parseInt(str.substring(0, pos));
              str = str.substring(pos + 1);
 -            pos = str.indexOf('/');
-+            pos = var_388;
++            int var_388 = str.indexOf('/');
++			pos = var_388;
              if (pos < 0) {
                  throw new NumberFormatException("The fraction could not be parsed as the format X Y/Z");
              } else {
-@@ -342,7 +343,7 @@
-         }
- 
-         // parse Y/Z format
--        pos = str.indexOf('/');
-+        pos = var_388;
-         if (pos < 0) {
-             // simple whole number
-             return getFraction(Integer.parseInt(str), 1);

diff --git a/home/safe/SafeExtractor/Evaluation/patch/Closure/eclipse/1080_createTypeWithSubTypes(jsType).patch b/home/safe/SafeExtractor/Evaluation/patch/Closure/ours/1080_createTypeWithSubTypes(jsType).patch
index 8fdd356..b10ba18 100644
--- a/home/safe/SafeExtractor/Evaluation/patch/Closure/eclipse/1080_createTypeWithSubTypes(jsType).patch
+++ b/home/safe/SafeExtractor/Evaluation/patch/Closure/ours/1080_createTypeWithSubTypes(jsType).patch
@@ -1,25 +1,14 @@
 diff --git a/src/com/google/javascript/jscomp/TightenTypes.java b/src/com/google/javascript/jscomp/TightenTypes.java
-index 2f1ab6a..f702635 100644
+index 2f1ab6a..95aeec5 100644
 --- a/src/com/google/javascript/jscomp/TightenTypes.java
 +++ b/src/com/google/javascript/jscomp/TightenTypes.java
-@@ -1197,12 +1197,15 @@
- 
+@@ -1198,7 +1198,8 @@
      if (jsType == null || jsType.isUnknownType() || concreteType.isNone()) {
        ret = concreteType;
--    } else if (concreteType.isUnion() || concreteType.isSingleton()) {
+     } else if (concreteType.isUnion() || concreteType.isSingleton()) {
 -      ret = concreteType.intersectWith(createTypeWithSubTypes(jsType));
++      ConcreteType var_1080 = createTypeWithSubTypes(jsType);
++	ret = concreteType.intersectWith(var_1080);
      } else {
--      Preconditions.checkState(concreteType.isAll());
--      ret = createTypeWithSubTypes(jsType);
--    }
-+		ConcreteType var_1080 = createTypeWithSubTypes(jsType);
-+		if (concreteType.isUnion() || concreteType.isSingleton()) {
-+		  ret = concreteType.intersectWith(var_1080);
-+		} else {
-+		  Preconditions.checkState(concreteType.isAll());
-+		  ret = var_1080;
-+		}
-+	}
-     ret = ret.intersectWith(ConcreteType.createForTypes(allInstantiatedTypes));
- 
-     // Keep all function types, as restricting to instantiated types will only
+       Preconditions.checkState(concreteType.isAll());
+       ret = createTypeWithSubTypes(jsType);

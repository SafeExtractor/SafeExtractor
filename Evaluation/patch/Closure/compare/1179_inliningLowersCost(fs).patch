diff --git a/home/safe/SafeExtractor/Evaluation/patch/Closure/eclipse/1179_inliningLowersCost(fs).patch b/home/safe/SafeExtractor/Evaluation/patch/Closure/ours/1179_inliningLowersCost(fs).patch
index 00900c5..1513871 100644
--- a/home/safe/SafeExtractor/Evaluation/patch/Closure/eclipse/1179_inliningLowersCost(fs).patch
+++ b/home/safe/SafeExtractor/Evaluation/patch/Closure/ours/1179_inliningLowersCost(fs).patch
@@ -1,8 +1,8 @@
 diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java
-index 008ffe5..58138ea 100644
+index 008ffe5..ebaace8 100644
 --- a/src/com/google/javascript/jscomp/InlineFunctions.java
 +++ b/src/com/google/javascript/jscomp/InlineFunctions.java
-@@ -687,12 +687,13 @@
+@@ -687,7 +687,8 @@
     * @return Whether inlining the references lowers the overall cost.
     */
    private boolean mimimizeCost(FunctionState fs) {
@@ -12,9 +12,3 @@ index 008ffe5..58138ea 100644
        // Try again without Block inlining references
        if (fs.hasBlockInliningReferences()) {
          fs.setRemove(false);
-         fs.removeBlockInliningReferences();
--        if (!fs.hasReferences() || !inliningLowersCost(fs)) {
-+        if (!fs.hasReferences() || !var_1179) {
-           return false;
-         }
-       } else {

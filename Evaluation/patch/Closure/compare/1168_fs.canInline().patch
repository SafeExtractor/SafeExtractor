diff --git a/home/safe/SafeExtractor/Evaluation/patch/Closure/eclipse/1168_fs.canInline().patch b/home/safe/SafeExtractor/Evaluation/patch/Closure/ours/1168_fs.canInline().patch
index a61626e..79c1fb4 100644
--- a/home/safe/SafeExtractor/Evaluation/patch/Closure/eclipse/1168_fs.canInline().patch
+++ b/home/safe/SafeExtractor/Evaluation/patch/Closure/ours/1168_fs.canInline().patch
@@ -1,5 +1,5 @@
 diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java
-index 008ffe5..da89c8c 100644
+index 008ffe5..06448f3 100644
 --- a/src/com/google/javascript/jscomp/InlineFunctions.java
 +++ b/src/com/google/javascript/jscomp/InlineFunctions.java
 @@ -251,7 +251,8 @@
@@ -12,21 +12,3 @@ index 008ffe5..da89c8c 100644
          // store it for use when inlining.
          fs.setFn(fn);
          if (injector.isDirectCallNodeReplacementPossible(
-@@ -268,7 +269,7 @@
-         }
- 
-         // Set the module and gather names that need temporaries.
--        if (fs.canInline()) {
-+        if (var_1168) {
-           fs.setModule(module);
- 
-           Node fnNode = fn.getFunctionNode();
-@@ -298,7 +299,7 @@
-         }
- 
-         // Check if block inlining is allowed.
--        if (fs.canInline() && !fs.canInlineDirectly()) {
-+        if (var_1168 && !fs.canInlineDirectly()) {
-           if (!blockFunctionInliningEnabled) {
-             fs.setInline(false);
-           }

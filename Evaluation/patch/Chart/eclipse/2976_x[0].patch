diff --git a/source/org/jfree/chart/renderer/xy/CyclicXYItemRenderer.java b/source/org/jfree/chart/renderer/xy/CyclicXYItemRenderer.java
index bdc095b..e9ee232 100644
--- a/source/org/jfree/chart/renderer/xy/CyclicXYItemRenderer.java
+++ b/source/org/jfree/chart/renderer/xy/CyclicXYItemRenderer.java
@@ -179,24 +179,25 @@
         boolean xBoundMapping = false, yBoundMapping = false;
         CyclicNumberAxis cnax = null, cnay = null;
 
-        if (domainAxis instanceof CyclicNumberAxis) {
+        double var_2976 = x[0];
+		if (domainAxis instanceof CyclicNumberAxis) {
             cnax = (CyclicNumberAxis) domainAxis;
             xcycleBound = cnax.getCycleBound();
             xBoundMapping = cnax.isBoundMappedToLastCycle();
             // If the segment must be splitted, insert a new point
             // Strict test forces to have real segments (not 2 equal points)
             // and avoids division by 0
-            if ((x[0] != x[1])
-                    && ((xcycleBound >= x[0])
+            if ((var_2976 != x[1])
+                    && ((xcycleBound >= var_2976)
                     && (xcycleBound <= x[1])
                     || (xcycleBound >= x[1])
-                    && (xcycleBound <= x[0]))) {
+                    && (xcycleBound <= var_2976))) {
                 double[] nx = new double[3];
                 double[] ny = new double[3];
-                nx[0] = x[0]; nx[2] = x[1]; ny[0] = y[0]; ny[2] = y[1];
+                nx[0] = var_2976; nx[2] = x[1]; ny[0] = y[0]; ny[2] = y[1];
                 nx[1] = xcycleBound;
-                ny[1] = (y[1] - y[0]) * (xcycleBound - x[0])
-                        / (x[1] - x[0]) + y[0];
+                ny[1] = (y[1] - y[0]) * (xcycleBound - var_2976)
+                        / (x[1] - var_2976) + y[0];
                 x = nx; y = ny;
             }
         }
@@ -212,10 +213,10 @@
                     || (ycycleBound >= y[1]) && (ycycleBound <= y[0]))) {
                 double[] nx = new double[x.length + 1];
                 double[] ny = new double[y.length + 1];
-                nx[0] = x[0]; nx[2] = x[1]; ny[0] = y[0]; ny[2] = y[1];
+                nx[0] = var_2976; nx[2] = x[1]; ny[0] = y[0]; ny[2] = y[1];
                 ny[1] = ycycleBound;
-                nx[1] = (x[1] - x[0]) * (ycycleBound - y[0])
-                        / (y[1] - y[0]) + x[0];
+                nx[1] = (x[1] - var_2976) * (ycycleBound - y[0])
+                        / (y[1] - y[0]) + var_2976;
                 if (x.length == 3) {
                     nx[3] = x[2]; ny[3] = y[2];
                 }
@@ -226,7 +227,7 @@
                     || (ycycleBound >= y[2]) && (ycycleBound <= y[1]))) {
                 double[] nx = new double[4];
                 double[] ny = new double[4];
-                nx[0] = x[0]; nx[1] = x[1]; nx[3] = x[2];
+                nx[0] = var_2976; nx[1] = x[1]; nx[3] = x[2];
                 ny[0] = y[0]; ny[1] = y[1]; ny[3] = y[2];
                 ny[2] = ycycleBound;
                 nx[2] = (x[2] - x[1]) * (ycycleBound - y[1])
@@ -245,11 +246,11 @@
         OverwriteDataSet newset = new OverwriteDataSet(x, y, dataset);
 
         if (cnax != null) {
-            if (xcycleBound == x[0]) {
+            if (xcycleBound == var_2976) {
                 cnax.setBoundMappedToLastCycle(x[1] <= xcycleBound);
             }
             if (xcycleBound == x[1]) {
-                cnax.setBoundMappedToLastCycle(x[0] <= xcycleBound);
+                cnax.setBoundMappedToLastCycle(var_2976 <= xcycleBound);
             }
         }
         if (cnay != null) {
